name: Release driven pipeline

on:
  push:
    tags:
      - "v*" # Only runs on version tags like v1.0.0
permissions:
  contents: write
env:
  GO_VERSION: "1.24"
  IMAGE_NAME: mpc913/devops_palermo

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Tests
        run: |
          go mod tidy
          go test -v ./...

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_SECRET_KEY }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=devops_palermo
            org.opencontainers.image.description=Trabajo practico de devops para la universidad de palermo
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Create GitHub Release
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Generate release notes
        id: generate_release_notes
        run: |
          current_tag="${{ github.ref_name }}"
          previous_tag=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1 2>/dev/null) 2>/dev/null || echo "")

          if [ -z "$previous_tag" ]; then
            echo "No previous tag found, getting all commits."
            log=$(git log --pretty=format:"- %s (%h)")
          else
            echo "Previous tag: $previous_tag"
            log=$(git log "$previous_tag..$current_tag" --pretty=format:"- %s (%h)")
          fi

          echo "Changes in version $current_tag:" > RELEASE_NOTES.md
          echo "$log" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
